{"version":3,"sources":["logo.svg","components/SelectionSort.js","components/SortCollection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SelectionSort","props","handleChange","event","setState","delay","target","value","componentDidMount","setSortData","getSortData","actualHits","total","i","values","length","hitCount","sortObjects","swapCount","swap","targetIndex","sourceIndex","newSortObjects","state","slice","tempValue","checkSmallest","_smallest","_smallestIndex","inspecting","setTimeout","completeSelectionSortFrom","startSelectionSortFrom","currentStart","_startingIndex","sort","console","log","Date","render","id","className","map","item","index","itemStyle","width","indicatorState","key","style","clear","htmlFor","type","onChange","handleDelayChange","onClick","init","numberOfElements","bind","Component","SortCollection","currentSortAlgorithm","sObjects","push","getRandomArray","count","nums","num","Math","ceil","random","includes","getDescendingArray","getAscendingArray","current","getNearlySortedArray","swaps","num1","num2","temp","scrambleAll","setDescending","setAscending","setNearlySorted","startAll","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3fe9149.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nclass SelectionSort extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfElements: 50,\n      sortObjects: [],\n      delay: 10,\n      actualHits: 0,\n      swapCount: 0,\n      _smallest: 0,\n      _smallestIndex: 0\n    };\n    this.handleDelayChange = this.handleChange.bind(this);\n  }\n  \n  handleChange = (event) => {\n    this.setState({delay: event.target.value});\n  }\n\n  componentDidMount = () => {\n    this.setSortData(this.props.getSortData());\n  }\n\n  actualHits = () => {\n    var total = 0;\n    for (var i=0; i<this.values.length; i++){\n      total += this.values[i].hitCount;\n    }\n    return total;\n  }\n\n  setSortData = (sortObjects) => {\n    this.setState({sortObjects: sortObjects, actualHits: 0, swapCount: 0});\n  }\n\n  swap = (targetIndex, sourceIndex) => {\n    if (targetIndex !== sourceIndex) {\n      const newSortObjects = this.state.sortObjects.slice();\n      var tempValue = newSortObjects[targetIndex].value;\n      newSortObjects[targetIndex].value = newSortObjects[sourceIndex].value;\n      newSortObjects[sourceIndex].value = tempValue;\n      this.setState({sortObjects: newSortObjects, swapCount: this.state.swapCount + 1 })\n    }\n  }\n\n  checkSmallest = (i) => {\n    if (this.state.sortObjects[i].value < this.state._smallest) {\n      this.setState({_smallest: this.state.sortObjects[i].value, _smallestIndex: i})\n    }\n    const newSortObjects = this.state.sortObjects.slice();\n    newSortObjects[i].inspecting = false;\n    if (i + 1 <= newSortObjects.length - 1) {\n      newSortObjects[i + 1].inspecting = true;\n      this.setState({sortObjects: newSortObjects, actualHits: this.state.actualHits + 1});\n      setTimeout(() => {this.checkSmallest(i+1)}, this.state.delay);\n    } else {\n      this.completeSelectionSortFrom();\n    }\n  }\n\n  startSelectionSortFrom = (i) => {\n    if (i > this.state.sortObjects.length - 1) {\n      return;\n    }\n    const newSortObjects = this.state.sortObjects.slice();\n    newSortObjects[i].inspecting = true;\n    newSortObjects[i].currentStart = true;\n    this.setState({\n      _smallestIndex: i,\n      _startingIndex: i,\n      _smallest: this.state.sortObjects[i].value,\n      sortObjects: newSortObjects\n    });\n    setTimeout(() => {this.checkSmallest(this.state._startingIndex)}, this.state.delay);\n  }\n\n  completeSelectionSortFrom = () => {\n    this.swap(this.state._startingIndex, this.state._smallestIndex);\n    const newSortObjects = this.state.sortObjects.slice();\n    newSortObjects[this.state._startingIndex].currentStart = false;\n    this.setState({sortObjects: newSortObjects});\n    this.startSelectionSortFrom(this.state._startingIndex + 1);\n  }\n\n  sort = () => {\n    console.log(\"started selectionsort at \" + new Date());\n    this.setState({swapCount:  0});\n    this.startSelectionSortFrom(0);\n  }\n\n\n  render = () => {\n    return (\n      <div id=\"selectionSort\" className=\"sortGroup\">\n        <div className=\"data\">\n          {\n            this.state.sortObjects.map ((item, index) => {\n              const itemStyle = {\n                width: item.value+10 + 'px',\n              };\n              const indicatorState = 'indicator ' + (item.currentStart ? 'show' : 'hide');\n              const inspecting = 'unit ' + (item.inspecting ? 'inspecting' : '');\n              return <span key={index}>\n                <div className={inspecting} style={itemStyle}></div>\n                <div className={indicatorState}></div>\n                <div className=\"clear\"></div>\n              </span>\n            })\n          }\n        </div>\n        <div className=\"sortInfo\">\n          <fieldset>\n            <legend>Selection Sort</legend>\n            <label>Average:</label><div className=\"sortData\">O(<i>n</i><sup>2</sup>)</div>\n            <label>Worst:</label><div className=\"sortData\">O(<i>n</i><sup>2</sup>)</div>\n            <label>Best:</label><div className=\"sortData\">O(<i>n</i><sup>2</sup>)</div>\n          </fieldset>\n          <br />\n          <fieldset>\n            <legend>Actuals</legend>\n            <label>Visited:</label><div className=\"sortData\">{this.state.actualHits}</div>\n            <label>Swapped:</label><div className=\"sortData\">{this.state.swapCount}</div>\n          </fieldset>\n        </div>\n        <br />\n        <div className=\"sortPanel\">\n          <br clear=\"all\" /><br />\n          <label htmlFor=\"delay\">delay</label>: <input id=\"delay\" type=\"text\" \n            value={this.state.delay} \n            onChange={this.handleDelayChange}/>\n          <br /><br />\n          <button onClick={this.sort}>sort</button><br /><br />\n          <button onClick={this.init}>scramble</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SelectionSort;","import React, { Component } from \"react\";\nimport SelectionSort from './SelectionSort.js'\n\nclass SortCollection extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfElements: 50,\n      currentSortAlgorithm: this.getRandomArray\n    };\n  }\n\n  getSortData = () => {\n    const values = this.state.currentSortAlgorithm();\n    console.log(\"Setting values: \" + values.length);\n    var sObjects = [];\n    for (var i=0; i<values.length; i++) {\n      sObjects.push({\n        value: values[i],\n        inspecting: false,\n        currentStart: false,\n        hitCount: 0\n      });\n    };\n    return sObjects;\n  }\n\n  getRandomArray = () => {\n    var count = 0;\n    var nums = [];\n    while (count < this.state.numberOfElements) {\n      var num = Math.ceil(Math.random() * this.state.numberOfElements);\n      if (!nums.includes(num)) {\n        nums.push(num);\n        count++;\n      }\n    }\n    return nums;\n  }\n\n  getDescendingArray = (numberOfElements) => {\n    var nums = [];\n    while (numberOfElements > 0) {\n      nums.push(numberOfElements-1);\n      numberOfElements--;\n    }\n    return nums;\n  }\n\n  getAscendingArray = (numberOfElements) => {\n    var nums = [];\n    var current = 0;\n    while (current < numberOfElements) {\n      nums.push(current);\n      current++;\n    }\n    return nums;\n  }\n\n  getNearlySortedArray = (numberOfElements) => {\n    var nums = [];\n    var current = 0;\n    while (current < numberOfElements) {\n      nums.push(current);\n      current++\n    }\n    var swapTotal = 5;\n    var swaps = 0;\n    while (swaps < swapTotal) {\n      var num1 = Math.ceil(Math.random() * (numberOfElements-1));\n      var num2 = num1+1;\n      if (num2 < numberOfElements) {\n        var temp = nums[num2];\n        nums[num2] = nums[num1];\n        nums[num1] = temp;\n        swaps++;\n      }\n    }\n    return nums;\n  }\n\n  scrambleAll = () => {\n    this.currentSortAlgorithm = this.getRandomArray;\n  }\n  setDescending = () => {\n    this.currentSortAlgorithm = this.getDescendingArray;\n  }\n  setAscending = () =>  {\n    this.currentSortAlgorithm = this.getAscendingArray;\n  }\n  setNearlySorted = () =>  {\n    this.currentSortAlgorithm = this.getNearlySortedArray;\n  }\n  startAll = () => {\n\n  }\n  \n  render = () => {\n    return (\n      <div className=\"mainLayout\">\n        <SelectionSort getSortData={this.getSortData}></SelectionSort>\n        <div className=\"masterButtons\">\n          <br clear=\"all\" /><br />\n          <button onClick={this.scrambleAll}>scramble all</button>\n          <br clear=\"all\" /><br />\n          <button onClick={this.setAscending}>set all sorted</button>\n          <br clear=\"all\" /><br />\t\t\n          <button onClick={this.setDescending}>set all inverted</button>\n          <br clear=\"all\" /><br />\n          <button onClick={this.setNearlySorted}>set all nearly sorted</button>\n          <br clear=\"all\" /><br />\n          <button onClick={this.startAll} id=\"mainSort\">sort all</button>\n          <br clear=\"all\" /><br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SortCollection;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortCollection from './components/SortCollection.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </header>\n    <SortCollection></SortCollection>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}